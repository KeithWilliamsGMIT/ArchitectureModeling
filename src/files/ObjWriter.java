// Keith Williams
// 14/10/2015
// ObjWriter - Export OBJ File

package files;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;

import model.FaceModel;
import model.GeometryModel;
import model.VertexModel;

public class ObjWriter {
	// Variables ********************************
    PrintWriter objWriter;
    GeometryModel model;
    int verticesWritten, normalsWritten, facesWritten;
    
    // Constructors *****************************
    public ObjWriter (GeometryModel m, String path) {
    	model = m;
    	save(path + ".obj");
    }
    
    // Methods **********************************
    public void save(String fn) {
        try {
        	// Open file
            objWriter = new PrintWriter(new FileOutputStream(fn));
            objWriter.println("# Generated by Architecture Modeling");
            
            // Initialize the total number of Vertices and Faces
            verticesWritten = facesWritten = 0;
            
            writeShape ();
            
            // Write the total number of Vertices and Faces as comments
            objWriter.println();
            objWriter.println("# Verices Written: " + verticesWritten);
            objWriter.println("# Normals Written: " + normalsWritten);
            objWriter.println("# Faces Written: " + facesWritten);
            
            // Close file
            objWriter.close();
        } catch (Exception e) {
            e.printStackTrace();
            
            try {
				ErrorLog.witeError("Error Exporting OBJ File");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
        }
    }

    public void writeShape() {
        objWriter.println("o " + model.name);
        
        // Loop through all vertices in the model
        for (int v = 0; v < model.vertices.size(); ++v) {
        	writeVertex(model.vertices.get(v));
        }
        
        objWriter.println();
        
        // Loop through all faces in the model (normals)
        for (int f = 0; f < model.faces.size(); ++f) {
        	writeNormal(model.faces.get(f));
        }
        
        objWriter.println();
        
        writeFaces();
    }
    
    // Write a single vertex to the file
    public void writeVertex(VertexModel v) {
        objWriter.println("v " + v.position[0] + " " + v.position[1] + " " + v.position[2] + "\n");
        
        // Increment the the number of vertices written
        ++verticesWritten;
    }
    
    // Write a normal to the file
    // Don't need to store normals in the GeometryModel as they are not needed to display the geometry
    public void writeNormal(FaceModel f) {
    	float vnx, vny, vnz;
    	float x1, y1, z1, x2, y2, z2;
    	float normalizationFactor;
    	
    	x1 = f.vertices.get(1).position[0] - f.vertices.get(0).position[0];
    	y1 = f.vertices.get(1).position[1] - f.vertices.get(0).position[1];
    	z1 = f.vertices.get(1).position[2] - f.vertices.get(0).position[2];
    	
    	x2 = f.vertices.get(2).position[0] - f.vertices.get(0).position[0];
    	y2 = f.vertices.get(2).position[1] - f.vertices.get(0).position[1];
    	z2 = f.vertices.get(2).position[2] - f.vertices.get(0).position[2];
    	
    	// Calculate normals
    	vnx = (y1 * z2) - (z1 * y2);
    	vny = -((z2 * x1) - (x2 * z1));
    	vnz = (x1 * y2) - (y1 * x2);
    	
    	// Normalise normals
    	normalizationFactor = (float)Math.sqrt(Math.pow(vnx, 2) + Math.pow(vny, 2) + Math.pow(vnz, 2));
    	vnx /= normalizationFactor;
    	vny /= normalizationFactor;
    	vnz /= normalizationFactor;
    	
        objWriter.println("vn " + vnx + " " + vny + " " + vnz);
        
        // Increment the total number of faces written
        ++normalsWritten;
    }
    
    // Write all the faces to the file
    public void writeFaces() {
    	FaceModel f;
    	
    	for (int i = 0; i < model.faces.size(); ++i) {
        	f = model.faces.get(i);
		    objWriter.print("f");
		    
		    for (int v = 0; v < f.vertices.size(); ++v) {
		    	objWriter.print(" " + (model.vertices.indexOf(f.vertices.get(v)) + 1) + "//" + (i + 1));
		    }
		    
		    objWriter.println();
		    
		    // Increment the total number of faces written
		    ++facesWritten;
    	}
    }
}
